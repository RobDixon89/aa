---
import { sanityClient } from "sanity:client";
import {
  pagesQuery,
  type PageQueryResponse,
  type PageResponse,
} from "../../queries/pages";
import { type SiteSettingsResponse } from "../../queries/settings";
import type { LocationLink } from "../../schema/linkList";
import PortableText from "../components/richTextBlocks/portableText.astro";
import Widgets from "../components/widgets.astro";
import Page from "../layouts/Page.astro";
import InnerPageBanner from "../stories/widgets/InnerPageBanner/InnerPageBanner";
import type { ServiceCardResponse } from "../stories/widgets/ServiceCards/schema";
import { mapImageAttributes, mapLinkAttributes } from "../utils/mapping";

export const prerender = true;

export async function getStaticPaths() {
  const res = (await sanityClient.fetch(pagesQuery)) as PageQueryResponse;

  return res.pages.map((page) => {
    return {
      params: {
        slug: page.slug,
      },
      props: {
        page,
        locations: res.locations,
        services: res.services,
        settings: res.settings,
      },
    };
  });
}

type Props = {
  settings: SiteSettingsResponse;
  page: PageResponse;
  locations: LocationLink[];
  services: ServiceCardResponse[];
};

const { slug } = Astro.params;
const { page, locations, services, settings } = Astro.props;

let breadcrumbs = [
  {
    text: "Home",
    url: "/",
  },
];

if (page.parent) {
  breadcrumbs.push({
    text: page.parent.title,
    url: `/${page.parent.slug.current}`,
  });
}

breadcrumbs.push({
  text: page.title,
  url: `/${slug}`,
});
---

<Page
  title={page.metaTitle ? page.metaTitle : page.title}
  description={page.metaDescription}
  image={page.metaImage}
  settings={settings}
  locations={locations}
  services={services}
>
  {
    page.banner ? (
      <InnerPageBanner
        breadcrumbs={breadcrumbs}
        subtitle={
          page.banner.subtitle
            ? page.banner.subtitle
            : page.parent
              ? page.parent.title
              : undefined
        }
        title={page.banner.title}
        ctas={
          page.banner.ctas !== null
            ? page.banner.ctas.map((cta) => mapLinkAttributes(cta))
            : []
        }
        image={
          page.banner.image ? mapImageAttributes(page.banner.image) : undefined
        }
        uspList={page.banner.usps ? settings.usps : []}
        theme={page.banner.theme}
      >
        <PortableText blockContent={page.banner.blockContent} />
      </InnerPageBanner>
    ) : null
  }

  {
    page.blockContent ? (
      <Widgets
        widgets={page.blockContent}
        usps={settings.usps}
        locations={locations}
        services={services}
      />
    ) : null
  }
</Page>
